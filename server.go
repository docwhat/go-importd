package main

import (
	"bytes"
	"html/template"
	"log"
	"net/http"
	"strings"
)

type handlerFunction func(http.ResponseWriter, *http.Request)

func serve(config appConfig) {
	http.HandleFunc("/", makeRedirector(config))
	log.Fatal(http.ListenAndServe(config.listenAddress, nil))
}

func urlExists(url string) bool {
	if resp, err := http.Head(url); err == nil {
		if resp.StatusCode == 200 {
			return true
		}
	}
	return false
}

func makeRedirector(config appConfig) handlerFunction {
	var redirectHTML = `<!DOCTYPE html>
<html lang="en">
<meta charset="utf-8">
<meta name="go-import" content="{{.ImportPrefix}} git {{.VcsURL}}">
<meta name="go-source" content="{{.ImportPrefix}} {{.VcsURL}} {{.VcsURL}}/tree/master{/dir} {{.VcsURL}}/blob/master{/dir}/{file}#L{line}">
<meta http-equiv="refresh" content="0; url={{.VcsURL}}">
<p>
The source is at <a href="{{.VcsURL}}">{{.VcsURL}}</a>; you should be redirected shortly.
<p style="font: small">
Generated by <a href="https://github.com/docwhat/go-importd">docwhat.org/go-importd</a>.
`

	tmpl := template.Must(template.New("main").Parse(redirectHTML))

	type templateData struct {
		ImportPrefix string
		VcsURL       string
	}

	return func(resp http.ResponseWriter, req *http.Request) {
		data := &templateData{}

		s := strings.SplitN(strings.Trim(req.URL.Path, "/"), "/", 2)
		repoName := s[0]
		data.ImportPrefix = config.hostPrefix + repoName
		data.VcsURL = config.githubUserURL + repoName

		if !urlExists(data.VcsURL) {
			http.Error(resp, "Not Found", 404)
			return
		}

		var buf bytes.Buffer
		err := tmpl.Execute(&buf, data)
		if err != nil {
			http.Error(resp, err.Error(), 500)
			return
		}

		if _, err := resp.Write(buf.Bytes()); err != nil {
			http.Error(resp, err.Error(), 500)
		}
	}
}
